from typing import List, Dict, Any, Optional
import asyncio
import random
import re
import time

from telethon import functions


class ChannelSubscriptionManager:
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    def __init__(self, bot_handler):
        self.bot = bot_handler
        
        self.sub_delay_range = (12, 22)
        self.check_delay_range = (5, 9)

    
    def __getattr__(self, name):
        return getattr(self.bot, name)

    

    async def handle_channel_subscriptions(self, buttons: List[Dict[str, Any]]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        
        print("[DEBUG] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ (row/column/text/type/url):")
        for btn in buttons:
            print(f"ROW: {btn.get('row')} COL: {btn.get('column')} TEXT: {btn.get('text')} TYPE: {btn.get('type')} URL: {btn.get('url', '')}")

        try:
            current_time = time.time()
            if self.subscription_blocked and current_time < self.global_wait_until:
                remaining_time = int(self.global_wait_until - current_time)
                print(f"[–ê–í–¢–û] –ü–æ–¥–ø–∏—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—â–µ –Ω–∞ {remaining_time} —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return
            elif self.subscription_blocked and current_time >= self.global_wait_until:
                print(f"[–ê–í–¢–û] –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–¥–ø–∏—Å–æ–∫")
                self.subscription_blocked = False
                self.global_wait_until = 0

            channel_check_pairs = []
            navigation_buttons = []

            rows: Dict[int, List[Dict[str, Any]]] = {}
            for btn in buttons:
                row_idx = btn.get('row', 0)
                rows.setdefault(row_idx, []).append(btn)

            for row_idx, row_buttons in rows.items():
                url_buttons = [btn for btn in row_buttons if btn.get('type') == 'url']
                check_buttons = [btn for btn in row_buttons if btn.get('type') == 'callback' and (
                    '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å' in btn['text'].lower() or 'üîÑ' in btn['text'])]

                if url_buttons and check_buttons:
                    url_buttons.sort(key=lambda x: x.get('column', 0))
                    check_buttons.sort(key=lambda x: x.get('column', 0))

                    for i, url_btn in enumerate(url_buttons):
                        check_idx_rel = min(i, len(check_buttons) - 1) if check_buttons else None
                        check_btn = check_buttons[check_idx_rel] if check_idx_rel is not None else None

                        url_idx = buttons.index(url_btn)
                        check_idx = buttons.index(check_btn) if check_btn else None

                        channel_check_pairs.append({
                            'channel': {'index': url_idx, 'url': url_btn.get('url', ''), 'text': url_btn['text']},
                            'check': {'index': check_idx, 'text': check_btn['text']} if check_idx is not None else None
                        })

                        print(f"[–ê–í–¢–û] –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {url_btn['text']} - {url_btn.get('url', '')}")
                        if check_idx is not None:
                            print(f"[–ê–í–¢–û] –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_btn['text']}")

            for i, btn in enumerate(buttons):
                if btn.get('type') == 'callback' and (btn['text'] in ['>', '<', '‚Üí', '‚Üê'] or
                                                     'next' in btn['text'].lower() or 'prev' in btn['text'].lower()):
                    navigation_buttons.append({'index': i, 'text': btn['text']})
                    print(f"[–ê–í–¢–û] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {btn['text']}")

            for pair in channel_check_pairs:
                channel_info = pair['channel']
                check_info = pair['check']

                if not channel_info.get('url'):
                    print(f"[–ê–í–¢–û] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_info['text']}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                url = channel_info['url']
                wait_time = await self.db.get_wait_time(self.phone, url)
                if wait_time > 0:
                    print(f"[–ê–í–¢–û] –î–ª—è –∫–∞–Ω–∞–ª–∞ {channel_info['text']} –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {wait_time} —Å–µ–∫., –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                is_subscribed = await self.check_channel_subscription(url)

                if not is_subscribed:
                    print(f"[–ê–í–¢–û] –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_info['text']}, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è...")
                    subscription_result = await self.subscribe_to_channel(channel_info)

                    if subscription_result is not True:
                        print(f"[–ê–í–¢–û] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_info['text']} –Ω–µ —É–¥–∞–ª–∞—Å—å: {subscription_result}")
                        wait_seconds = 0
                        if isinstance(subscription_result, str):
                            wait_match = re.search(r'wait of (\d+) seconds', subscription_result, re.IGNORECASE)
                            if wait_match:
                                wait_seconds = int(wait_match.group(1))
                                print(f"[–ê–í–¢–û] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {wait_seconds} —Å–µ–∫—É–Ω–¥")

                        await self.db.add_subscription_attempt(
                            self.phone,
                            url,
                            success=False,
                            error_message=str(subscription_result) if subscription_result else None,
                            wait_time=wait_seconds
                        )

                        if wait_seconds > 0:
                            print(f"[–ê–í–¢–û] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {wait_seconds} —Å–µ–∫—É–Ω–¥")
                            self.global_wait_until = time.time() + wait_seconds
                            self.subscription_blocked = True
                            self.subscription_processing = False
                            print(f"[–ê–í–¢–û] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ {time.strftime('%H:%M:%S', time.localtime(self.global_wait_until))}")
                            return
                        continue
                    else:
                        print(f"[–ê–í–¢–û] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_info['text']}")
                else:
                    print(f"[–ê–í–¢–û] –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_info['text']}")

                if check_info:
                    print(f"[–ê–í–¢–û] –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
                    await asyncio.sleep(5)
                    print(f"[–ê–í–¢–û] –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_info['text']}")
                    success = await self.click_button(check_info['index'])
                    if success:
                        print(f"[–ê–í–¢–û] –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ '{check_info['text']}' –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                        await asyncio.sleep(8)
                    else:
                        print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_info['text']}")

                if pair != channel_check_pairs[-1]:
                    delay = random.randint(30, 60)
                    print(f"[–ê–í–¢–û] –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π...")
                    await asyncio.sleep(delay)

            if navigation_buttons and channel_check_pairs:
                print(f"[–ê–í–¢–û] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                next_button = None
                for nav_btn in navigation_buttons:
                    if nav_btn['text'] in ['>', '‚Üí'] or 'next' in nav_btn['text'].lower():
                        next_button = nav_btn
                        break

                if next_button:
                    print(f"[–ê–í–¢–û] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {next_button['text']}")
                    await asyncio.sleep(5)
                    success = await self.click_button(next_button['index'])
                    if success:
                        print(f"[–ê–í–¢–û] –ö–Ω–æ–ø–∫–∞ '{next_button['text']}' –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"[–ê–í–¢–û] –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    print(f"[–ê–í–¢–û] –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ - –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü")
                    self.subscription_processing = False
                    self.last_subscription_message = None
                    self.last_subscription_buttons = None
            else:
                print(f"[–ê–í–¢–û] –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                self.subscription_processing = False
                self.last_subscription_message = None
                self.last_subscription_buttons = None

        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {e}")
            self.subscription_processing = False
            self.last_subscription_message = None
            self.last_subscription_buttons = None

    async def handle_channel_subscriptions_with_check(self, subscription_buttons: List[Dict[str, Any]], check_buttons: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            current_time = time.time()
            if self.subscription_blocked and current_time < self.global_wait_until:
                remaining_time = int(self.global_wait_until - current_time)
                print(f"[–ê–í–¢–û] –ü–æ–¥–ø–∏—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—â–µ –Ω–∞ {remaining_time} —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return
            elif self.subscription_blocked and current_time >= self.global_wait_until:
                print(f"[–ê–í–¢–û] –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–¥–ø–∏—Å–æ–∫")
                self.subscription_blocked = False
                self.global_wait_until = 0

            check_button_indices = []
            for i, btn in enumerate(check_buttons):
                if btn.get('type') == 'callback' and ('–ø—Ä–æ–≤–µ—Ä–∏—Ç—å' in btn['text'].lower() or 'üîÑ' in btn['text']):
                    check_button_indices.append(i)
                    print(f"[–ê–í–¢–û] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {btn['text']} (–∏–Ω–¥–µ–∫—Å: {i})")

            if check_button_indices:
                check_index = check_button_indices[0]
                check_btn = check_buttons[check_index]
                print(f"[–ê–í–¢–û] –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_btn['text']}")
                success = await self.click_button(check_index)
                if success:
                    print(f"[–ê–í–¢–û] –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ '{check_btn['text']}' –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                    await asyncio.sleep(8)
                else:
                    print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_btn['text']}")
            else:
                print("[–ê–í–¢–û] –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await self.handle_channel_subscriptions(subscription_buttons)

        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π: {e}")
            self.subscription_processing = False
            self.last_subscription_message = None
            self.last_subscription_buttons = None

    async def check_channel_subscription(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –±–æ—Ç –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Telegram API"""
        try:
            if '/+' in url or 'joinchat/' in url:
                return False

            channel_username = self.extract_channel_username(url)
            if not channel_username:
                return False

            try:
                channel_entity = await self.client.get_entity(channel_username)
                await self.client(functions.channels.GetParticipantRequest(channel=channel_entity, participant='me'))
                print(f"[–ê–í–¢–û] –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {channel_username}")
                await self.db.add_subscription(self.phone, url, channel_username)
                return True
            except Exception:
                return False
        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def subscribe_to_channel(self, channel_info: Dict[str, Any]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            url = channel_info.get('url')
            channel_name = channel_info.get('text')

            if not url:
                print(f"[–ê–í–¢–û] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
                return False

            if url in self.subscribed_channels:
                print(f"[–ê–í–¢–û] –ö–∞–Ω–∞–ª {channel_name} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True

            print(f"[–ê–í–¢–û] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel_name}")

            if '/+' in url or 'joinchat/' in url:
                invite_hash = self.extract_invite_hash(url)
                if invite_hash:
                    try:
                        print(f"[–ê–í–¢–û] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é: {channel_name}")
                        await asyncio.wait_for(self.client(functions.messages.ImportChatInviteRequest(invite_hash)), timeout=30.0)
                        print(f"[–ê–í–¢–û] –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é: {channel_name}")
                        self.subscribed_channels.add(url)
                        await self.db.add_subscription(self.phone, url, channel_name)
                        await self.db.add_subscription_attempt(self.phone, url, success=True)
                        return True
                    except asyncio.TimeoutError:
                        print(f"[–ê–í–¢–û] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É {channel_name}")
                        self.subscribed_channels.add(url)
                        return False
                    except Exception as invite_error:
                        error_str = str(invite_error)
                        print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é {channel_name}: {invite_error}")
                        self.subscribed_channels.add(url)
                        return error_str if 'wait' in error_str.lower() else False

            channel_username = self.extract_channel_username(url)
            if not channel_username:
                print(f"[–ê–í–¢–û] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL: {url}")
                return False

            try:
                print(f"[–ê–í–¢–û] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_username}")
                channel_entity = await asyncio.wait_for(self.client.get_entity(channel_username), timeout=15.0)

                print(f"[–ê–í–¢–û] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_name}")
                await asyncio.wait_for(self.client(functions.channels.JoinChannelRequest(channel_entity)), timeout=30.0)
                print(f"[–ê–í–¢–û] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_name} (@{channel_username})")
                self.subscribed_channels.add(url)
                await self.db.add_subscription(self.phone, url, channel_name)
                await self.db.add_subscription_attempt(self.phone, url, success=True)
                return True
            except asyncio.TimeoutError:
                print(f"[–ê–í–¢–û] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_name}")
                self.subscribed_channels.add(url)
                return False
            except Exception as join_error:
                error_str = str(join_error)
                print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_name}: {join_error}")
                self.subscribed_channels.add(url)
                if 'wait' in error_str.lower():
                    wait_match = re.search(r'wait of (\d+) seconds', error_str)
                    if wait_match:
                        wait_seconds = int(wait_match.group(1))
                        print(f"[–ê–í–¢–û] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ {wait_seconds} —Å–µ–∫—É–Ω–¥")
                        self.subscription_blocked = True
                        self.global_wait_until = time.time() + wait_seconds
                    return error_str
                return False
        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
            return False

    def extract_channel_username(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL"""
        try:
            if 't.me/' in url:
                username = url.split('t.me/')[-1]
            elif 'telegram.me/' in url:
                username = url.split('telegram.me/')[-1]
            else:
                return None

            if username.startswith('+') or 'joinchat/' in username:
                return None

            username = username.split('?')[0].split('/')[0]
            if not username.startswith('@'):
                username = '@' + username
            return username
        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None

    def extract_invite_hash(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å —Ö–µ—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ URL"""
        try:
            if '/+' in url:
                hash_part = url.split('/+')[-1]
            elif 'joinchat/' in url:
                hash_part = url.split('joinchat/')[-1]
            else:
                return None

            invite_hash = hash_part.split('?')[0].split('/')[0]
            return invite_hash
        except Exception as e:
            print(f"[–ê–í–¢–û] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ö–µ—à–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return None

    async def process_channel_buttons(self, buttons: List[Dict[str, Any]]):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã (–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞), –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø—Ä–∞–≤–∞—è)."""
        
        rows = {}
        for idx, btn in enumerate(buttons):
            row = btn.get('row', 0)
            rows.setdefault(row, []).append((idx, btn))

        
        ordered_rows = sorted(rows.items())

        
        for _, btns in ordered_rows:
            
            btns_sorted = sorted(btns, key=lambda x: x[1].get('column', 0))
            url_btn = next((b for b in btns_sorted if b[1].get('type') == 'url'), None)
            check_btn = next((b for b in btns_sorted if b[1].get('type') == 'callback'), None)
            if not url_btn:
                continue

            channel_info = {
                'index': url_btn[0],
                'url': url_btn[1].get('url', ''),
                'text': url_btn[1].get('text', '')
            }
            print(f"‚ñ∂ –ü–æ–¥–ø–∏—Å–∫–∞: {channel_info['text']}")
            result = await self.subscribe_to_channel(channel_info)

            
            if isinstance(result, str) and 'wait' in result.lower():
                wait_match = re.search(r'wait of (\d+)', result)
                if wait_match:
                    wait_sec = int(wait_match.group(1)) + 5
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_sec} —Å–µ–∫. –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞")
                    await asyncio.sleep(wait_sec)
                    
                    continue

            if check_btn:
                print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ {check_btn[0]}")
                await self.click_button(check_btn[0])
                await asyncio.sleep(random.randint(*self.check_delay_range))

            await asyncio.sleep(random.randint(*self.sub_delay_range)) 